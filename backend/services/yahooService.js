const YahooFinanceClass = require('yahoo-finance2').default;

/**
 * Yahoo Finance Service (Using yahoo-finance2 library)
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏≤‡∏Å Yahoo Finance ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
 * ‚úÖ Built-in rate limiting
 * ‚úÖ Built-in error handling  
 * ‚úÖ TypeScript support
 * ‚úÖ No mock data - Real prices only
 */

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Yahoo Finance instance (‡∏õ‡∏¥‡∏î survey notice)
const yahooFinance = new YahooFinanceClass({
  suppressNotices: ['yahooSurvey']
});

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å Yahoo Finance
 * @param {string[]} symbols - Array ‡∏Ç‡∏≠‡∏á ticker symbols (‡πÄ‡∏ä‡πà‡∏ô ['AAPL', 'TSLA'])
 * @returns {Promise<Object>} - Object ‡∏ó‡∏µ‡πà‡∏°‡∏µ key ‡πÄ‡∏õ‡πá‡∏ô symbol ‡πÅ‡∏•‡∏∞ value ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
 */
async function getStockPrices(symbols) {
  if (!symbols || symbols.length === 0) {
    return {};
  }

  try {
    console.log(`üîç Fetching prices for: ${symbols.join(', ')}`);
    
    // ‡πÉ‡∏ä‡πâ yahoo-finance2 quote method
    const quotes = await yahooFinance.quote(symbols);
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Object { symbol: price }
    const prices = {};
    
    // ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß quotes ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô object, ‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô array
    const quotesArray = Array.isArray(quotes) ? quotes : [quotes];
    
    quotesArray.forEach(quote => {
      // ‡πÉ‡∏ä‡πâ regularMarketPrice ‡∏´‡∏£‡∏∑‡∏≠ preMarketPrice (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      const price = quote.regularMarketPrice || quote.preMarketPrice || quote.postMarketPrice || 0;
      
      prices[quote.symbol] = {
        price: price,
        regularMarketPrice: quote.regularMarketPrice || 0,
        preMarketPrice: quote.preMarketPrice || 0,
        postMarketPrice: quote.postMarketPrice || 0,
        currency: quote.currency || 'USD',
        marketState: quote.marketState || 'REGULAR',
        shortName: quote.shortName || quote.longName || quote.symbol,
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        change: quote.regularMarketChange || 0,
        changePercent: quote.regularMarketChangePercent || 0,
        dayHigh: quote.regularMarketDayHigh || 0,
        dayLow: quote.regularMarketDayLow || 0
      };
    });

    console.log(`‚úÖ Successfully fetched ${quotesArray.length} stock(s)`);
    return prices;
    
  } catch (error) {
    console.error(`‚ùå Yahoo Finance Error: ${error.message}`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• error ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    if (error.message.includes('Not Found') || error.message.includes('404')) {
      console.error(`üí° One or more symbols not found: ${symbols.join(', ')}`);
    } else if (error.message.includes('Too Many Requests') || error.message.includes('429')) {
      console.error(`üí° Rate limited. Try again in a few seconds.`);
    } else {
      console.error(`üí° Check your internet connection or try again later.`);
    }
    
    throw new Error(`Failed to fetch stock prices: ${error.message}`);
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
 * @param {string} symbol - Ticker symbol
 * @returns {Promise<Object>} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 */
async function getStockDetails(symbol) {
  try {
    console.log(`üîç Fetching details for: ${symbol}`);
    
    const quote = await yahooFinance.quote(symbol);
    
    if (!quote) {
      throw new Error(`Stock symbol ${symbol} not found`);
    }

    console.log(`‚úÖ Successfully fetched details for ${symbol}`);
    
    return {
      symbol: quote.symbol,
      shortName: quote.shortName || quote.longName || symbol,
      price: quote.regularMarketPrice || 0,
      change: quote.regularMarketChange || 0,
      changePercent: quote.regularMarketChangePercent || 0,
      dayHigh: quote.regularMarketDayHigh || 0,
      dayLow: quote.regularMarketDayLow || 0,
      volume: quote.regularMarketVolume || 0,
      marketCap: quote.marketCap || 0,
      currency: quote.currency || 'USD',
      marketState: quote.marketState || 'REGULAR'
    };
  } catch (error) {
    console.error(`‚ùå Error fetching details for ${symbol}: ${error.message}`);
    throw error;
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏Ñ‡∏≤ (Historical Data)
 * @param {string} symbol - Ticker symbol
 * @param {Object} options - Options { period1, period2, interval }
 * @returns {Promise<Object>} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏Ñ‡∏≤
 */
async function getHistoricalData(symbol, options = {}) {
  try {
    const defaultOptions = {
      period1: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
      period2: new Date(), // ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      interval: '1d', // ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
      ...options
    };
    
    const result = await yahooFinance.historical(symbol, defaultOptions);
    console.log(`‚úÖ Fetched ${result.length} historical records for ${symbol}`);
    
    return result;
  } catch (error) {
    console.error(`‚ùå Error fetching historical data for ${symbol}: ${error.message}`);
    throw error;
  }
}

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏∏‡πâ‡∏ô (Search symbols)
 * @param {string} query - ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 * @returns {Promise<Array>} - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
 */
async function searchSymbols(query) {
  try {
    const result = await yahooFinance.search(query);
    console.log(`‚úÖ Found ${result.quotes?.length || 0} results for "${query}"`);
    
    return result.quotes || [];
  } catch (error) {
    console.error(`‚ùå Error searching for "${query}": ${error.message}`);
    throw error;
  }
}

module.exports = {
  getStockPrices,
  getStockDetails,
  getHistoricalData,
  searchSymbols
};
